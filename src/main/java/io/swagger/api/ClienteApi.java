/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-17T15:51:38.272Z")

@Api(value = "cliente", description = "the cliente API")
public interface ClienteApi {

    @ApiOperation(value = "Altera um cliente existente", nickname = "alterarCliente", notes = "Esta operação tem por objetivo alterar o cadasrto de um cliente existente.", response = Cliente.class, tags={ "Alterar", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar cadastro do cliente", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração inválido."),
        @ApiResponse(code = 401, message = "Alteração não autorizado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a alteração de cliente") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alterarCliente(@ApiParam(value = "Id do cliente",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Alteração de status por Id", nickname = "alterarClienteStatus", notes = "Esta operacao tem por objetivo alterar o status do cliente por id.", response = Cliente.class, tags={ "Alterar", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Sucesso ao alterar o status de um cliente existente.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Alteração de status inválida."),
        @ApiResponse(code = 401, message = "Alteração de status não autorizada."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar alteração de status.") })
    @RequestMapping(value = "/cliente/{status}/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> alterarClienteStatus(@ApiParam(value = "Status do cliente",required=true, allowableValues = "\"ativo\", \"inativo\"") @PathVariable("status") String status,@ApiParam(value = "Número do id do cliente",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Cadastrar um novo cliente.", nickname = "cadastrarCliente", notes = "Está operação tem por objetivo cadastrar um novo clientes", tags={ "Cadastrar", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Sucesso ao cadastrar novo cliente"),
        @ApiResponse(code = 400, message = "Cadastro inválido."),
        @ApiResponse(code = 401, message = "Cadastro não autorizado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar o cadastro de um novo cliente") })
    @RequestMapping(value = "/cliente",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> cadastrarCliente(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente);


    @ApiOperation(value = "Consultar cliente existente por Id", nickname = "consultarClienteId", notes = "Esssa operação tem por objetivo consultar um cliente existente por id", response = Cliente.class, tags={ "Consultar", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso ao consultar um cliente existente por Id.", response = Cliente.class),
        @ApiResponse(code = 400, message = "Nenhum cliente encontrado para consultar por id."),
        @ApiResponse(code = 401, message = "Consulta não autorizado."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar consulta por id") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultarClienteId(@ApiParam(value = "Número do id do cliente",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Consulta cliente existente por sobrenome.", nickname = "consultarClienteSobrenome", notes = "Está operação tem por objetivo consultar um cliente por sobrenome.", response = Cliente.class, tags={ "Consultar", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Sucesso ao consultar cliente por sobrenome", response = Cliente.class),
        @ApiResponse(code = 400, message = "Consulta inválida."),
        @ApiResponse(code = 401, message = "Consulta não autorizada."),
        @ApiResponse(code = 404, message = "Nenhum cliente encontrado para pesquisa."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a consulta por sobrenome.") })
    @RequestMapping(value = "/cliente/consulta/{sobrenome}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Cliente> consultarClienteSobrenome(@ApiParam(value = "Sobrenome do cliente.",required=true) @PathVariable("sobrenome") String sobrenome);


    @ApiOperation(value = "Exclui um cliente existente", nickname = "excluirCliente", notes = "Está operação tem por objetivo excluir um cliente existente.", tags={ "Excluir", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Sucesso ao excluir um cliente existente."),
        @ApiResponse(code = 400, message = "Exclusão inválida."),
        @ApiResponse(code = 500, message = "Erro interno ao tentar realizar a exclusão.") })
    @RequestMapping(value = "/cliente/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> excluirCliente(@ApiParam(value = "Número do id do cliente.",required=true) @PathVariable("id") Integer id);

}
